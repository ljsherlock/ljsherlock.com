/**
* @desc         Base Mixins.
* @name         Mixins
* @author
* @tested
* @requires     variables.scss
*/

@import 'mixin/_flex';
@import 'mixin/_useful';


@mixin adaptive-root-font-size() {
    @media (max-width: #{map_deep_get($type_scale, screen, min)}){
        %root {
            font-size: #{map_deep_get($type_scale, min)};
            line-height: #{ map_deep_get($type_scale, min) * map_deep_get($type_scale, scale) };
        }
    }

    @media (min-width: #{map_deep_get($type_scale, screen, min)}) and (max-width: #{map_deep_get($type_scale, screen, max)}){
        %root {
            @include adaptive_font( map_deep_get($type_scale, min), map_deep_get($type_scale, max), map_deep_get($type_scale, scale) );
        }
    }

    @media (min-width: #{map_deep_get($type_scale, screen, max)}) {
        %root {
            font-size: #{map_deep_get($type_scale, max)};
            line-height: #{map_deep_get($type_scale, max) * map_deep_get($type_scale, scale)};
        }
    }
}

@mixin grid( $item: "*", $gutter: 30px, $width: '', $width2: '') {
    & > #{$item} {
        @if $width != nil { width: $width }
        @if $gutter != nil { margin-right: $gutter }
        &:last-of-type {
            margin-right: 0;
        }
    }
    & > *:nth-child(2) {
        @if $width2 != nil { width: $width2 }
    }
}

@mixin grid--gutter($dir, $gut) {
    > * {
        margin-#{$dir}: em( $gut );
    }
}

@mixin grid--gutter-last-of($dir) {
    > * {
        &:last-child {
            margin-#{$dir}: 0;
        }
    }
}

// Padding longhand version
@mixin padding-all($top: null, $right: null, $bottom: null, $left: null, $remain: null) {
  @if $top != null { padding-top: #{($top)}px } @else if $remain != null { padding-top: #{($remain)}px }
  @if $right != null { padding-right: #{($right)}px } @else if $remain != null { padding-right: #{($remain)}px }
  @if $bottom != null { padding-bottom: #{($bottom)}px } @else if $remain != null { padding-bottom: #{($remain)}px }
  @if $left != null { padding-left: #{($left)}px } @else if $remain != null { padding-left: #{($remain)}px }
}

@mixin adaptive_font( $min_font, $max_font, $line: 1.5 )
{
   font-size: calc( #{$min_font}px + (#{$max_font} - #{$min_font}) * ( (100vw - #{map_deep_get($type_scale, min )}px) / ( #{map_deep_get($type_scale, max)} - #{map_deep_get($type_scale, min )}) ) );

   line-height: calc( (#{$min_font}px + (#{$max_font} - #{$min_font}) * ( (100vw - #{map_deep_get($type_scale, min )}px) / ( #{map_deep_get($type_scale, max)} - #{map_deep_get($type_scale, min )}) ) ) * #{$line} );
}

@mixin mobile {
    @media (max-width: #{ map_deep_get($media, tablet) - 0.1 }em) {
      @content;
    }
}

@mixin tablet {
  @media (min-width: #{ map_deep_get($media, tablet) }em)
  and (max-width: #{ map_deep_get($media, desktop) - 1 }em) {
    @content;
  }
}

@mixin portable {
  @media (max-width: #{ map_deep_get($media, desktop) - 1  }em) {
    @content;
  }
}

@mixin desktop {
  @media (min-width: #{ map_deep_get($media, desktop) }em) {
    @content;
  }
}

@mixin wrapper {
  @media (min-width: #{ map_deep_get( $media, desktop ) }em )
  and (max-width: #{ (map_deep_get($layout, wrap, desktop, width) - 1) / $root }em) {
    @content;
  }
}

@mixin infinite {
  @media ( min-width: #{ map_deep_get($layout, wrap, desktop, width) - 1 }em ) {
    @content;
  }
}


@mixin em($font) {
  font-size: #{$font div map_deep_get($type_scale, max) }em;
}

@mixin line-height($line) {
    line-height: #{$line div map_deep_get($type_scale, max) }rem;
}

@mixin vertical-gradient($alpha, $start : $pohutukawa, $stop: $utahCrimson) {
    background-color: ($start + $stop) / 2;
    background: -moz-linear-gradient(left,  rgba($start, $alpha) 0%, rgba($stop, $alpha) 100%); /* FF3.6-15 */
    background: -webkit-linear-gradient(left,  rgba($start, $alpha) 0%,rgba($stop, $alpha) 100%); /* Chrome10-25,Safari5.1-6 */
    background: linear-gradient(to right,  rgba($start, $alpha) 0%,rgba($stop, $alpha) 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$start}', endColorstr='#{$stop}',GradientType=1 ); /* IE6-9 */
}

@mixin positional-pseudo($pseudo:'before', $top:initial, $right:initial, $bottom:initial, $left:initial) {
  &:#{$pseudo} {
      top:$top;
      right:$right;
      bottom: $bottom;
      left: $left;
      position: absolute;
      content: "";
      @content;
  }
}

@mixin absolute($top:0, $right:0, $bottom:0, $left:0, $w: 100%, $h: 100%) {
  top:$top;
  right:$right;
  bottom: $bottom;
  left: $left;
  width: $w;
  height: $h;
  @content;
}

@mixin wrap-size( $device ) {
    $size: map_deep_get( $layout, wrap, $device, width );

    @if $size == 100%  {
        width: $size;
    } @else {
        width: #{ $size / $root }em;
    }
};
